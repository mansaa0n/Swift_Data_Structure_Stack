public struct Stack<T> {
  fileprivate var array = [T]()

  public var isEmpty: Bool {
    return array.isEmpty
  }

  public var count: Int {
    return array.count
  }

  public mutating func push(_ element: T) {
    array.append(element)
  }

  public mutating func pop() -> T? {
    return array.popLast()
  }

  public var top: T? {
    return array.last
  }
}





struct Stack {
    private var StackUsers: [Users] = []
    
    func peek() -> Users {
        guard let topElement = StackUsers.first else { fatalError("This stack is empty.") }
        return topElement
    }
    subscript(index: Int) -> Users? {
        let User = StackUsers[index]
        return User
        
    }
    mutating func pop() -> Users {
        return StackUsers.removeFirst()
    }
    mutating func push(_ element: Users) {
        StackUsers.insert(element, at: 0)
    }
    mutating func count()->Int{
       return StackUsers.count
    }
    mutating func RemoveAll(){
        StackUsers.removeAll()
    }
}
